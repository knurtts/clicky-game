{"version":3,"sources":["components/Header/Header.js","components/GojiCard/GojiCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","className","currentScore","highScore","GojiCard","src","alt","name","onClick","increaseScore","id","key","App","state","gojis","images","score","maxScore","_this","setState","_this2","this","Header_Header","map","goji","img","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w+BAuBeA,MArBf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,4BACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAWJ,EAAAC,EAAAC,cAAA,+FACxBF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMM,eAE3BL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMO,uBCVhC,SAASC,EAASR,GAC7B,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACfJ,EAAAC,EAAAC,cAAA,OACIM,IAAKT,EAAMS,IAAKJ,UAAU,eAC1BK,IAAKV,EAAMW,KACXC,QAASZ,EAAMa,cACfC,GAAId,EAAMe,wBCyBPC,6MA7BbC,MAAQ,CACNC,MAAOC,EACPC,MAAO,EACPC,SAAU,KAGZR,cAAgB,WACdS,EAAKC,SAAS,CAACH,MAAOE,EAAKL,MAAMG,MAAO,6EAGjC,IAAAI,EAAAC,KACP,OAAQxB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACNH,EAAAC,EAAAC,cAACuB,EAAD,CAAQpB,aAAcmB,KAAKR,MAAMG,MAAOb,UAAWkB,KAAKR,MAAMI,WAC9DpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZoB,KAAKR,MAAMC,MAAMS,IAAI,SAACC,GAAD,OACrB3B,EAAAC,EAAAC,cAACK,EAAD,CACGO,IAAKa,EAAKd,GACVL,IAAKmB,EAAKC,IACVlB,KAAMiB,EAAKjB,KACXE,cAAeW,EAAKX,4BArBhBiB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f5708f2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return(\r\n        <>\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"row\">\r\n                <h1 className=\"col-md-4\">The Godzilla Clicky-Game</h1>\r\n                <p className=\"col-md-4\"><h4>Click on an image to increase your score. But don't click on the same one twice!</h4></p>\r\n                <div className=\"col-md-3\">\r\n                    <div className=\"row\">\r\n                        <h3>Your Score: {props.currentScore}</h3>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <h3>High Score: {props.highScore}</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nexport default function GojiCard(props) {\r\n    return (\r\n        <div className=\"card\">\r\n        <img \r\n            src={props.src} className=\"card-img-top\" \r\n            alt={props.name} \r\n            onClick={props.increaseScore} \r\n            id={props.key} />\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\nimport Header from \"./components/Header/Header\"\nimport GojiCard from \"./components/GojiCard/GojiCard\"\nimport './App.css';\nimport images from \"./images.json\";\n\nclass App extends Component {\n  state = {\n    gojis: images,\n    score: 0,\n    maxScore: 0\n  };\n\n  increaseScore = () => {\n    this.setState({score: this.state.score +1});\n  };\n\n  render() {\n    return (<>\n      <Header currentScore={this.state.score} highScore={this.state.maxScore}/>\n      <div className=\"container\">\n        <div className=\"row\">\n          {this.state.gojis.map((goji) => \n          (<GojiCard \n              key={goji.id}\n              src={goji.img}\n              name={goji.name}\n              increaseScore={this.increaseScore}\n            />)\n          )}\n        </div>\n      </div>\n    </>);\n  }\n}\n\nexport default App;\n\n\n//populate 12 pictures which are clickable --DONE\n  //map over array of pictures to display them in cards --DONE\n//Each picture will modify a state for that picture to say that it has been clicked\n//Each time a picture is clicked the pictures reorder themselves randomly\n  //Player score increases by 1 --DONE\n  //if picture has already been clicked, player loses\n  //screen shake?\n  //score resets to 0\n//If score reaches 12 Player wins\n  //screen hops?\n  //Congratulations message appears\n  //Game restarts\n\n\n//Components\n  //picture card --DONE\n  //Header with score and title of game --DONE","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}